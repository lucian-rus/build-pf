<?xml version="1.0" encoding="UTF-8"?>
<body>
    <item>
        <name>init_include</name>
        <required>true</required>
        <type>include</type>
        <parent>root</parent>
        <text>#include @1@linux/init.h@2@</text>
    </item>

    <item>
        <name>module_include</name>
        <required>true</required>
        <type>include</type>
        <parent>root</parent>
        <text>#include @1@linux/module.h@2@</text>
    </item>

    <item>
        <name>license</name>
        <required>true</required>
        <type>ldd_start_macro</type>
        <parent>root</parent>
        <text>MODULE_LICENSE("``template_module_license``");</text>
    </item>

    <item>
        <name>author</name>
        <required>false</required>
        <type>ldd_start_macro</type>
        <parent>root</parent>
        <text>MODULE_AUTHOR("``template_module_author``");</text>
    </item>

    <item>
        <name>description</name>
        <required>false</required>
        <type>ldd_start_macro</type>
        <parent>root</parent>
        <text>MODULE_DESCRIPTION("``template_module_description``");</text>
    </item>

    <item>
        <name>init_function</name>
        <required>true</required>
        <type>function</type>
        <parent>root</parent>
        <text>static int ``template_ldd_name``_init(void)</text>
    </item>

    <item>
        <name>exit_function</name>
        <required>true</required>
        <type>function</type>
        <parent>root</parent>
        <text>static void ``template_ldd_name``_exit(void)</text>
    </item>

    <item>
        <name>init</name>
        <required>true</required>
        <type>ldd_end_macro</type>
        <parent>root</parent>
        <text>module_init(``template_ldd_name``_init);</text>
    </item>

    <item>
        <name>exit</name>
        <required>true</required>
        <type>ldd_end_macro</type>
        <parent>root</parent>
        <text>module_exit(``template_ldd_name``_exit);</text>
    </item>

    <item>
        <name>proc_include</name>
        <required>false</required>
        <type>include</type>
        <parent>root</parent>
        <text>#include @1@linux/proc_fs.h@2@</text>
    </item>

    <item>
        <name>proc_struct_decl</name>
        <required>false</required>
        <type>declaration</type>
        <parent>root</parent>
        <text>static struct proc_dir_entry *proc_entry;</text>
    </item>

    <item>
        <name>proc_entry_decl</name>
        <required>false</required>
        <type>declaration</type>
        <parent>root</parent>
        <text>struct proc_ops driver_proc_ops = {};</text>
    </item>

    <item>
        <name>func_call1</name>
        <required>false</required>
        <type>function_call</type>
        <parent>init_function</parent>
        <text>printk("------------------- module loaded\n");</text>
    </item>

    <item>
        <name>func_call2</name>
        <required>false</required>
        <type>function_call</type>
        <parent>init_function</parent>
        <text>proc_entry = proc_create("``template_ldd_name``" @3@ (umode_t)0 @3@ NULL @3@ @4@driver_proc_ops);</text>
    </item>

    <item>
        <name>func_call3</name>
        <required>false</required>
        <type>function_call</type>
        <parent>init_function</parent>
        <text>return 0;</text>
    </item>

    <item>
        <name>func_call4</name>
        <required>false</required>
        <type>function_call</type>
        <parent>exit_function</parent>
        <text>printk("------------------- module unloaded\n");</text>
    </item>

    <item>
        <name>func_call5</name>
        <required>false</required>
        <type>function_call</type>
        <parent>exit_function</parent>
        <text>proc_remove(proc_entry);</text>
    </item>

</body>
